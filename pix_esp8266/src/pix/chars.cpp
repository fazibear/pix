#include "chars.h"

namespace Chars {

namespace {

const CharMap chars{
    {
        '0',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
    {
        '1',
        {
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
        },
    },
    {
        '2',
        {
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("111"),

        },
    },
    {
        '3',
        {
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("110"),
        },
    },
    {
        '4',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
        },
    },
    {
        '5',
        {
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("110"),
        },
    },
    {
        '6',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
    {
        '7',
        {
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),

        },
    },
    {
        '8',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
    {
        '9',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("011"),
        },
    },
    {
        'A',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'B',
        {
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("110"),
        },
    },
    {
        'C',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("011"),
        },
    },
    {
        'D',
        {
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("110"),
        },
    },
    {
        'E',
        {
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
    {
        'F',
        {
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
        },
    },
    {
        'G',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("011"),
        },
    },
    {
        'H',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'I',
        {
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        'J',
        {
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        'K',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'L',
        {
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
    {
        'M',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'N',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'O',
        {
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        'P',
        {
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
        },
    },
    {
        'Q',
        {
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        'R',
        {
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("110"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'S',
        {
            std::bitset<CHAR_WIDTH>("011"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("110"),
        },
    },
    {
        'T',
        {
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        'U',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
    {
        'V',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        'W',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'X',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        'Y',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        'Z',
        {
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
    {
        ' ',
        {
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
        },
    },
    {
        '.',
        {
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        ',',
        {
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
        },
    },
    {
        '-',
        {
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("000"),
        },
    },
    {
        '\\',
        {
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
        },
    },
    {
        '/',
        {
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("100"),
        },
    },
    {
        ':',
        {
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("000"),
        },
    },
    {
        ';',
        {
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("000"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("100"),
        },
    },
    {
        '%',
        {
            std::bitset<CHAR_WIDTH>("101"),
            std::bitset<CHAR_WIDTH>("001"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("010"),
            std::bitset<CHAR_WIDTH>("100"),
            std::bitset<CHAR_WIDTH>("101"),
        },
    },
    {
        -1,
        {
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
            std::bitset<CHAR_WIDTH>("111"),
        },
    },
};

}; // namespace

Char getChar(char c) {
  char up = std::toupper(c);
  if (chars.find(up) != chars.end()) {
    return chars.at(up);
  } else {
    return chars.at(-1);
  }
}

void put_char(Platform *platform, char c, int8_t x, int8_t y, int8_t color) {
  const Char &char_data = getChar(c);
  for (int j = 0; j < CHAR_HEIGHT; j++) {
    for (int i = 0; i < CHAR_WIDTH; i++) {
      if (char_data[j][CHAR_WIDTH - i - 1]) {
        if (x + i >= 0 && x + i <= 15 && y + j >= 0 && y + j <= 15) {
          platform->set_dot(x + i, y + j, color);
        }
      }
    }
  }
}
}; // namespace Chars
